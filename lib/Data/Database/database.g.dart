// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:TodoTable.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// TodoTable TABLE
class TableTodoTable extends SqfEntityTableBase {
  TableTodoTable() {
    // declare properties of EntityTable
    tableName = 'todo';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text, isNotNull: true),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('is_done', DbType.bool,
          defaultValue: false, isNotNull: true),
      SqfEntityFieldBase('created_at', DbType.datetime,
          defaultValue: DateTime.now(), minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updated_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTodoTable();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class ArchiDb extends SqfEntityModelProvider {
  ArchiDb() {
    databaseName = archiDb.databaseName;
    password = archiDb.password;
    dbVersion = archiDb.dbVersion;
    preSaveAction = archiDb.preSaveAction;
    logFunction = archiDb.logFunction;
    databaseTables = [
      TableTodoTable.getInstance,
    ];

    bundledDatabasePath = archiDb
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = archiDb.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region TodoTable
class TodoTable extends TableBase {
  TodoTable(
      {this.id,
      this.title,
      this.description,
      this.is_done,
      this.created_at,
      this.updated_at,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  TodoTable.withFields(this.title, this.description, this.is_done,
      this.created_at, this.updated_at, this.isDeleted) {
    _setDefaultValues();
  }
  TodoTable.withId(this.id, this.title, this.description, this.is_done,
      this.created_at, this.updated_at, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  TodoTable.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['is_done'] != null) {
      is_done =
          o['is_done'].toString() == '1' || o['is_done'].toString() == 'true';
    }
    if (o['created_at'] != null) {
      created_at = tryParseDateTime(o['created_at']!.toString());
    }
    if (o['updated_at'] != null) {
      updated_at = tryParseDateTime(o['updated_at']!.toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (TodoTable)
  int? id;
  String? title;
  String? description;
  bool? is_done;
  DateTime? created_at;
  DateTime? updated_at;
  bool? isDeleted;

  // end FIELDS (TodoTable)

  static const bool _softDeleteActivated = true;
  TodoTableManager? __mnTodoTable;

  TodoTableManager get _mnTodoTable {
    return __mnTodoTable = __mnTodoTable ?? TodoTableManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (is_done != null) {
      map['is_done'] = forQuery ? (is_done! ? 1 : 0) : is_done;
    } else if (is_done != null || !forView) {
      map['is_done'] = null;
    }
    if (created_at != null) {
      map['created_at'] = defaultDateTimeFormat.format(created_at!);
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = defaultDateTimeFormat.format(updated_at!);
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (is_done != null) {
      map['is_done'] = forQuery ? (is_done! ? 1 : 0) : is_done;
    } else if (is_done != null || !forView) {
      map['is_done'] = null;
    }
    if (created_at != null) {
      map['created_at'] = defaultDateTimeFormat.format(created_at!);
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = defaultDateTimeFormat.format(updated_at!);
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [TodoTable]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [TodoTable]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      title,
      description,
      is_done,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      title,
      description,
      is_done,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<TodoTable>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR TodoTable.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<TodoTable>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <TodoTable>[];
    try {
      objList = list
          .map((todotable) =>
              TodoTable.fromMap(todotable as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR TodoTable.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<TodoTable>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<TodoTable> objList = <TodoTable>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = TodoTable.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns TodoTable by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [TodoTable] if exist, otherwise returns null
  Future<TodoTable?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    TodoTable? obj;
    final data = await _mnTodoTable.getById([id]);
    if (data.length != 0) {
      obj = TodoTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (TodoTable) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTodoTable.insert(this, ignoreBatch);
    } else {
      await _mnTodoTable.update(this);
    }

    return id;
  }

  /// Saves the (TodoTable) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTodoTable.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTodoTable.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs TodoTable. Returns a new Primary Key value of TodoTable

  /// <returns>Returns a new Primary Key value of TodoTable
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<TodoTable> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<TodoTable> todotables,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ArchiDb().batchStart();
    for (final obj in todotables) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ArchiDb().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < todotables.length; i++) {
        if (todotables[i].id == null) {
          todotables[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTodoTable.rawInsert(
          'INSERT OR REPLACE INTO todo (id, title, description, is_done, created_at, updated_at,isDeleted)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            title,
            description,
            is_done,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            updated_at != null ? updated_at!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'TodoTable id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'TodoTable id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'TodoTable Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<TodoTable>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<TodoTable> todotables,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTodoTable.rawInsertAll(
        'INSERT OR REPLACE INTO todo (id, title, description, is_done, created_at, updated_at,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        todotables,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes TodoTable

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete TodoTable invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTodoTable
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTodoTable.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover TodoTable

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover TodoTable invoked (id=$id)');
    {
      return _mnTodoTable.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  TodoTableFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TodoTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TodoTableFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TodoTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    is_done = is_done ?? false;
    created_at = created_at ?? DateTime.now();
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  Future<int?> empty() async {
    int? result = await TodoTable(
      title: "Sample Task",
      description: "Sample desc",
    ).save();
    return result;
  }

  // END CUSTOM CODE
}
// endregion todotable

// region TodoTableField
class TodoTableField extends FilterBase {
  TodoTableField(TodoTableFilterBuilder todotableFB) : super(todotableFB);

  @override
  TodoTableFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder isNull() {
    return super.isNull() as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TodoTableFilterBuilder;
  }

  @override
  TodoTableField get not {
    return super.not as TodoTableField;
  }
}
// endregion TodoTableField

// region TodoTableFilterBuilder
class TodoTableFilterBuilder extends ConjunctionBase {
  TodoTableFilterBuilder(TodoTable obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTodoTable = obj._mnTodoTable;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TodoTableManager? _mnTodoTable;

  /// put the sql keyword 'AND'
  @override
  TodoTableFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TodoTableFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TodoTableFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TodoTableFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TodoTableFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TodoTableFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TodoTableFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TodoTableFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TodoTableFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TodoTableFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TodoTableFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TodoTableField _setField(
      TodoTableField? field, String colName, DbType dbtype) {
    return TodoTableField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TodoTableField? _id;
  TodoTableField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TodoTableField? _title;
  TodoTableField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  TodoTableField? _description;
  TodoTableField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  TodoTableField? _is_done;
  TodoTableField get is_done {
    return _is_done = _setField(_is_done, 'is_done', DbType.bool);
  }

  TodoTableField? _created_at;
  TodoTableField get created_at {
    return _created_at = _setField(_created_at, 'created_at', DbType.datetime);
  }

  TodoTableField? _updated_at;
  TodoTableField get updated_at {
    return _updated_at = _setField(_updated_at, 'updated_at', DbType.datetime);
  }

  TodoTableField? _isDeleted;
  TodoTableField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<TodoTable> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTodoTable!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTodoTable!.delete(qparams);
    }
    return r;
  }

  /// Recover List<TodoTable> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover TodoTable bulk invoked');
    return _mnTodoTable!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from todo ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTodoTable!.updateBatch(qparams, values);
  }

  /// This method always returns [TodoTable] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> TodoTable?
  @override
  Future<TodoTable?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTodoTable!.toList(qparams);
    final data = await objFuture;
    TodoTable? obj;
    if (data.isNotEmpty) {
      obj = TodoTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [TodoTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> TodoTable?
  @override
  Future<TodoTable> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        TodoTable();
  }

  /// This method returns int. [TodoTable]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? todotableCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final todotablesFuture = await _mnTodoTable!.toList(qparams);
    final int count = todotablesFuture[0]['CNT'] as int;
    if (todotableCount != null) {
      todotableCount(count);
    }
    return count;
  }

  /// This method returns List<TodoTable> [TodoTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<TodoTable>
  @override
  Future<List<TodoTable>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<TodoTable> todotablesData = await TodoTable.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return todotablesData;
  }

  /// This method returns Json String [TodoTable]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [TodoTable]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [TodoTable]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTodoTable!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [TodoTable]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM todo WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTodoTable!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [TodoTable]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTodoTable!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await TodoTable.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTodoTable!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TodoTableFilterBuilder

// region TodoTableFields
class TodoTableFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fIs_done;
  static TableField get is_done {
    return _fIs_done =
        _fIs_done ?? SqlSyntax.setField(_fIs_done, 'is_done', DbType.bool);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.datetime);
  }

  static TableField? _fUpdated_at;
  static TableField get updated_at {
    return _fUpdated_at = _fUpdated_at ??
        SqlSyntax.setField(_fUpdated_at, 'updated_at', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TodoTableFields

//region TodoTableManager
class TodoTableManager extends SqfEntityProvider {
  TodoTableManager()
      : super(ArchiDb(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'todo';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TodoTableManager
class ArchiDbSequenceManager extends SqfEntityProvider {
  ArchiDbSequenceManager() : super(ArchiDb());
}
// END OF ENTITIES
